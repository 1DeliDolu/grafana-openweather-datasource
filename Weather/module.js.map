{"version":3,"file":"module.js","mappings":"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","sources":["webpack://grafana-openweather-datasource/external amd \"@grafana/ui\"","webpack://grafana-openweather-datasource/external amd \"module\"","webpack://grafana-openweather-datasource/external amd \"@grafana/runtime\"","webpack://grafana-openweather-datasource/external amd \"@grafana/data\"","webpack://grafana-openweather-datasource/external amd \"react\"","webpack://grafana-openweather-datasource/webpack/bootstrap","webpack://grafana-openweather-datasource/webpack/runtime/compat get default export","webpack://grafana-openweather-datasource/webpack/runtime/define property getters","webpack://grafana-openweather-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://grafana-openweather-datasource/webpack/runtime/make namespace object","webpack://grafana-openweather-datasource/webpack/runtime/publicPath","webpack://grafana-openweather-datasource/./node_modules/grafana-public-path.js","webpack://grafana-openweather-datasource/./types.ts","webpack://grafana-openweather-datasource/./datasource.ts","webpack://grafana-openweather-datasource/./components/QueryEditor.tsx","webpack://grafana-openweather-datasource/./module.ts","webpack://grafana-openweather-datasource/./components/ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/grafana-openweather-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/grafana-openweather-datasource/';\n","import {  DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport interface MyQuery extends DataQuery {\n  city: string;\n  mainParameter: 'main' | 'wind' | 'clouds' | 'rain';\n  subParameter: string;  // Keep as single string since backend expects one value\n  units: 'standard' | 'metric' | 'imperial';\n  queryText?: string;  // for template variables\n}\n\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\n  city: 'Marburg',\n  mainParameter: 'main',\n  subParameter: 'temp',\n  units: 'metric',\n};\n\nexport interface DataPoint {\n  Time: number;\n  Value: number;\n}\n\nexport interface DataSourceResponse {\n  datapoints: DataPoint[];\n  list: WeatherData[];\n}\n\nexport interface WeatherData {\n  dt: number;\n  main: {\n    temp: number;\n    feels_like: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n    sea_level?: number;\n    grnd_level?: number;\n  };\n  wind: {\n    speed: number;\n    deg: number;\n    gust?: number;\n  };\n  clouds: {\n    all: number;\n  };\n  visibility: number;\n  weather: Array<{\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n  }>;\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  url?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  apiKey?: string;\n}\n","import { DataSourceInstanceSettings, CoreApp, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  applyTemplateVariables(query: MyQuery, scopedVars: ScopedVars) {\n    return {\n      ...query,\n      queryText: getTemplateSrv().replace(query.queryText, scopedVars),\n    };\n  }\n\n  filterQuery(query: MyQuery): boolean {\n    // if no query has been provided, prevent the query from being executed\n    return !!query.queryText;\n  }\n}\n","import React from 'react';\nimport { InlineField, Stack, Select } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nconst unitsOptions: Array<SelectableValue<string>> = [\n  { label: 'Standard', value: 'standard' },\n  { label: 'Metric', value: 'metric' },\n  { label: 'Imperial', value: 'imperial' },\n];\n\nconst mainParameterOptions: Array<SelectableValue<string>> = [\n  { label: 'Main Weather Data', value: 'main' },\n  { label: 'Wind', value: 'wind' },\n  { label: 'Clouds', value: 'clouds' },\n  { label: 'Rain', value: 'rain' },\n];\n\nconst subParameterOptions: { [key: string]: Array<SelectableValue<string>> } = {\n  main: [\n    { label: 'Temperature', value: 'temp' },\n    { label: 'Feels Like', value: 'feels_like' },\n    { label: 'Min Temperature', value: 'temp_min' },\n    { label: 'Max Temperature', value: 'temp_max' },\n    { label: 'Pressure', value: 'pressure' },\n    { label: 'Sea Level', value: 'sea_level' },\n    { label: 'Ground Level', value: 'grnd_level' },\n    { label: 'Humidity', value: 'humidity' },\n  ],\n  wind: [\n    { label: 'Speed', value: 'speed' },\n    { label: 'Direction', value: 'deg' },\n    { label: 'Gust', value: 'gust' },\n  ],\n  clouds: [\n    { label: 'Cloudiness', value: 'all' },\n  ],\n  rain: [\n    { label: '3h Rain Volume', value: '3h' },\n  ],\n};\n\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\n  const onCityNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const cityName = e.target.value;\n    onChange({\n      ...query,\n      city: cityName,\n      queryText: cityName, // Bu önemli, backend'e gönderilen query metni\n    });\n    // Hemen çalıştır\n    onRunQuery();\n  };\n\n  const onMainParameterChange = (value: SelectableValue<string>) => {\n    if (!value.value) {return};\n    \n    // Ana parametre değiştiğinde, alt parametreyi varsayılan değere ayarla\n    const mainParam = value.value as MyQuery['mainParameter'];\n    const defaultSubParam = subParameterOptions[mainParam][0].value as string;\n    \n    onChange({\n      ...query,\n      mainParameter: mainParam,\n      subParameter: defaultSubParam,\n    });\n    onRunQuery();\n  };\n\n  const onSubParameterChange = (value: SelectableValue<string>) => {\n    if (!value.value) {return};\n    \n    onChange({\n      ...query,\n      subParameter: value.value,\n    });\n    onRunQuery();\n  };\n\n  const onUnitsChange = (value: SelectableValue<string>) => {\n    onChange({ ...query, units: value.value as 'standard' | 'metric' | 'imperial' });\n    onRunQuery();\n  };\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <div>\n        <InlineField label=\"City Name\" labelWidth={20} tooltip=\"Enter city name (e.g., London,uk)\">\n          <input\n            type=\"text\"\n            value={query.city || query.city || ''}\n            onChange={onCityNameChange}\n            placeholder=\"Enter city name (e.g., London,uk)\"\n            className=\"gf-form-input width-20\"\n          />\n        </InlineField>\n      </div>\n\n      <div>\n        <InlineField label=\"Main Parameter\" labelWidth={20} tooltip=\"Select main weather parameter\">\n          <Select\n            options={mainParameterOptions}\n            value={mainParameterOptions.find(opt => opt.value === query.mainParameter)}\n            onChange={onMainParameterChange}\n            width={40}\n          />\n        </InlineField>\n      </div>\n\n      <div>\n        <InlineField label=\"Parameters\" labelWidth={20} tooltip=\"Select weather parameter\">\n          <Select\n            options={subParameterOptions[query.mainParameter || 'main']}\n            value={{\n              label: subParameterOptions[query.mainParameter || 'main']\n                .find(opt => opt.value === query.subParameter)?.label || '',\n              value: query.subParameter || '',\n            }}\n            onChange={onSubParameterChange}\n            isMulti={false}\n            width={40}\n          />\n        </InlineField>\n      </div>\n\n      <div>\n        <InlineField label=\"Units\" labelWidth={20} tooltip=\"Select measurement units\">\n          <Select\n            options={unitsOptions}\n            value={query.units || 'metric'}\n            onChange={onUnitsChange}\n            width={40}\n          />\n        </InlineField>\n      </div>\n    </Stack>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions, MySecureJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions,MySecureJsonData>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, SecretInput , Input} from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const { secureJsonFields, secureJsonData, jsonData } = options;\n\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  // Regular field (sent to the frontend) für url\n  const onURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        url: event.target.value,\n      },\n    });\n  };\n\n  return (\n    <>\n    \n      <InlineField label=\"API Key\" labelWidth={14} interactive tooltip={'Secure json field (backend only)'}>\n        <SecretInput\n          required\n          id=\"config-editor-api-key\"\n          isConfigured={secureJsonFields.apiKey}\n          value={secureJsonData?.apiKey}\n          placeholder=\"Enter your API key\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n      <InlineField label=\"URL\" labelWidth={14} tooltip={'URL to the weather API'}>\n        <Input\n          required\n          id=\"config-editor-url\"\n          value={jsonData.url || ''}\n          placeholder=\"Enter the URL\"\n          width={40}\n          onChange={onURLChange}\n        />\n      </InlineField>\n    </>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","city","mainParameter","subParameter","units","DataSource","DataSourceWithBackend","getDefaultQuery","_","applyTemplateVariables","query","scopedVars","queryText","getTemplateSrv","replace","filterQuery","constructor","instanceSettings","super","unitsOptions","label","mainParameterOptions","subParameterOptions","main","wind","clouds","rain","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","options","secureJsonFields","secureJsonData","jsonData","InlineField","labelWidth","interactive","tooltip","SecretInput","required","id","isConfigured","apiKey","placeholder","width","onReset","onChange","event","target","Input","url","setQueryEditor","onRunQuery","Stack","direction","gap","div","input","type","e","cityName","className","Select","find","opt","mainParam","defaultSubParam","isMulti"],"sourceRoot":""}